FROM alpine:latest

# 修改源
RUN echo "http://mirrors.aliyun.com/alpine/latest-stable/main/" > /etc/apk/repositories && \
    echo "http://mirrors.aliyun.com/alpine/latest-stable/community/" >> /etc/apk/repositories

ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev dpkg \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkgconf \
		re2c

# persistent / runtime deps
RUN apk add --no-cache --virtual .persistent-deps \
		ca-certificates \
		curl \
		tar \
		xz \
# https://github.com/docker-library/php/issues/494
		libressl

# ensure www-data user exists
RUN set -x \
	&& addgroup -g 82 -S www \
	&& adduser -u 82 -D -S -G www www

ENV PHP_INI_DIR /usr/local/php/etc
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www --with-fpm-group=www --disable-cgi
##</autogenerated>##

ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV PHP_VERSION 7.3.7

RUN mkdir -p /usr/src

# 复制源
COPY src /usr/src/

COPY docker-php-source /usr/local/bin/

RUN set -xe \
	&& apk add --no-cache --virtual .build-deps \
		$PHPIZE_DEPS \
		argon2-dev \
		coreutils \
		curl-dev \
		libedit-dev \
		libressl-dev \
		libsodium-dev \
		libxml2-dev \
		sqlite-dev \
		yaml-dev \
        rabbitmq-c-dev \
	\
	&& apk add tzdata \
	&& ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && echo "Asia/Shanghai" > /etc/timezone \
	&& export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		--enable-option-checking=fatal \
		--with-mhash \
		--enable-opcache \
		--enable-ftp \
		--enable-mbstring \
		--enable-mysqlnd \
		--enable-pcntl \
		--enable-sockets \
		--with-mysqli \
		--with-pdo-mysql \
		--with-password-argon2 \
		--with-sodium=shared \
		--with-curl \
		--with-iconv \
		--with-libedit \
		--with-openssl \
		--with-zlib \
		$(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(nproc)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	\
    # 设置 php.ini
	&& cp -v php.ini-production "$PHP_INI_DIR/php.ini" \
    && sed -i "s@^memory_limit.*@memory_limit = 256M@" $PHP_INI_DIR/php.ini \
    && sed -i 's@^output_buffering =@output_buffering = On\noutput_buffering =@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^;cgi.fix_pathinfo.*@cgi.fix_pathinfo=0@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^short_open_tag = Off@short_open_tag = On@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^expose_php = On@expose_php = Off@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^request_order.*@request_order = "CGP"@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^;date.timezone.*@date.timezone = Asia/Shanghai@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^post_max_size.*@post_max_size = 1024M@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^upload_max_filesize.*@upload_max_filesize = 1024M@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^max_execution_time.*@max_execution_time = 600@' $PHP_INI_DIR/php.ini \
    && sed -i 's@^;realpath_cache_size.*@realpath_cache_size = 2M@' $PHP_INI_DIR/php.ini \
#    && sed -i 's@^disable_functions.*@disable_functions = passthru,chroot,chgrp,chown,proc_open,proc_get_status,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket@' $PHP_INI_DIR/php.ini \
    # && [ -e /usr/sbin/sendmail ] && sed -i 's@^;sendmail_path.*@sendmail_path = /usr/sbin/sendmail -t -i@' $PHP_INI_DIR/php.ini \
    # && sed -i "s@^;curl.cainfo.*@curl.cainfo = ${openssl_install_dir}/cert.pem@" $PHP_INI_DIR/php.ini \
    # && sed -i "s@^;openssl.cafile.*@openssl.cafile = ${openssl_install_dir}/cert.pem@" $PHP_INI_DIR/php.ini \
	\
	# pecl 安装扩展
	&& pecl install /usr/src/yaml.tgz \
	&& pecl install /usr/src/redis.tgz \
	&& pecl install /usr/src/mongodb.tgz \
	&& pecl install /usr/src/amqp.tgz \
	&& pecl install /usr/src/swoole.tgz \
	&& cd / \
	&& docker-php-source delete \
	\
	&& runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache --virtual .php-rundeps $runDeps \
	\
	&& apk del .build-deps \
	\
# https://github.com/docker-library/php/issues/443
	&& pecl update-channels \
	&& rm -rf /tmp/pear ~/.pearrc

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

RUN docker-php-ext-enable sodium yaml redis mongodb amqp swoole

# 使用docker-php-ext 安装的php扩展
RUN set -ex \
    && apk add --no-cache postgresql-dev \
    && docker-php-ext-install pgsql pdo_pgsql seaslog opcache

ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo 'include=etc/php-fpm.d/*.conf'; \
		} | tee php-fpm.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo 'clear_env = no'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
		echo 'decorate_workers_output = no'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = 9000'; \
	} | tee php-fpm.d/zz-docker.conf

EXPOSE 9000
CMD ["php-fpm"]